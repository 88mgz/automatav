export const dynamic = "force-dynamic";

type TocItem = { title: string; id: string };
type Block =
  | { type: "intro"; text: string }
  | { type: "comparisonTable"; items: Array<{ name: string; [k: string]: any }> }
  | { type: "specGrid"; items: Array<{ name: string; [k: string]: any }> }
  | { type: "prosCons"; pros: string[]; cons: string[] }
  | { type: "gallery"; images: Array<{ url: string; alt?: string }> }
  | { type: "faq"; items: Array<{ q: string; a: string }> }
  | { type: "ctaBanner"; heading: string; label: string; href: string; body?: string }
  | { type: "markdown"; content: string };

function toSlug(s: string) {
  return (s || "")
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "")
    .slice(0, 120);
}

function ensureTocObjects(toc: any): TocItem[] {
  if (!Array.isArray(toc)) toc = [];
  return toc.map((t: any, i: number) => {
    if (typeof t === "string") {
      const title = t;
      const id = toSlug(title) || `sec-${i + 1}`;
      return { title, id };
    }
    const title = String(t?.title ?? `Section ${i + 1}`);
    const id = String(t?.id ?? (toSlug(title) || `sec-${i + 1}`));
    return { title, id };
  });
}

function mockArticleFromPrompt(prompt: string) {
  const titleMatch = /Title:\s*(.+)/i.exec(prompt);
  const title = titleMatch?.[1]?.trim() || "Sample Comparison: A vs B";
  const slug = toSlug(title);

  const article = {
    title,
    slug,
    description: "Autogenerated mock article for debugging.",
    intent: "comparison" as const,
    hero: {
      headline: title,
      subheadline: "This is a mock article (no API key required).",
      cta: { label: "Explore", href: "#" },
    },
    toc: ensureTocObjects(["Overview", "Key Takeaways", "FAQ"]),
    blocks: [
      { type: "intro", text: "This is a mock intro section. Replace with real generation once the API is configured." },
      { type: "prosCons", pros: ["Easy to debug"], cons: ["Not real data"] },
      { type: "faq", items: [{ q: "Is this real?", a: "No, this is mock content used for testing." }] },
      { type: "ctaBanner", heading: "Ready to continue?", label: "Learn more", href: "#" },
    ] as Block[],
  };

  return article;
}

export async function POST(req: Request) {
  try {
    const { prompt } = await req.json().catch(() => ({}));
    if (!prompt || typeof prompt !== "string") {
      return new Response(JSON.stringify({ error: "Missing prompt" }), { status: 400 });
    }

    const useMock = process.env.MOCK_GENERATE === "1" || !process.env.OPENAI_API_KEY;
    if (useMock) {
      const article = mockArticleFromPrompt(prompt);
      return new Response(JSON.stringify({ article }), { headers: { "Content-Type": "application/json" }});
    }

    // If you want to call OpenAI for real, uncomment and implement below.
    // Minimal pattern (Responses API) â€“ ensure you have openai/env set up:
    //
    // const res = await fetch("https://api.openai.com/v1/responses", {
    //   method: "POST",
    //   headers: {
    //     "Content-Type": "application/json",
    //     "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
    //   },
    //   body: JSON.stringify({
    //     model: "gpt-4.1-mini",
    //     input: prompt,
    //   }),
    // });
    // if (!res.ok) {
    //   const txt = await res.text();
    //   console.error("OpenAI error:", res.status, txt);
    //   return new Response(JSON.stringify({ error: `OpenAI ${res.status}`, details: txt }), { status: 500 });
    // }
    // const json = await res.json();
    // const raw = json.output_text ?? json.choices?.[0]?.message?.content ?? "{}";
    // const parsed = typeof raw === "string" ? JSON.parse(raw) : raw;
    // parsed.toc = ensureTocObjects(parsed.toc);
    // return new Response(JSON.stringify({ article: parsed }), { headers: { "Content-Type": "application/json" }});

    // For now we already returned mock above when no key is present.
  } catch (err: any) {
    console.error("Generate route error:", err);
    return new Response(JSON.stringify({ error: err?.message || "Server error" }), { status: 500 });
  }
}
